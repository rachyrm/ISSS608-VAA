[
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "In this hands-on exercise, I will be exploring the fundamental principles and key components of ggplot2, gaining experience in creating statistical graphics using the Layered Grammar of Graphics. By the end, I’ll be adept at employing ggplot2’s graphical elements to produce elegant and functional statistical visuals."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#installing-and-importing-r-packages",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#installing-and-importing-r-packages",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Installing and importing R packages",
    "text": "Installing and importing R packages\nBefore diving into the code below, it is crucial to ensure that the necessary R packages are installed. The code chunk below utilizes the ‘p_load()’ function from the pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be imported into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#importing-the-data",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#importing-the-data",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Importing the data",
    "text": "Importing the data\nThe provided code utilizes the read_csv() function from the readr package within the tidyverse to import the “exam_data.csv” file into the R environment.\nThis dataset comprises examination scores of 3rd grade students. It encompasses seven categorical and continuous attributes, with ID, CLASS, GENDER, and RACE being categorical, while MATHS, ENGLISH, and SCIENCE are continuous.\nThis dataset offers insights into the academic performance of students, allowing for the exploration of patterns and relationships between various attributes.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\nNote:\n\nWithout ‘show_col_types = FALSE’, the message below will be shown"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#r-graphics-vs-ggplot",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "R Graphics VS ggplot",
    "text": "R Graphics VS ggplot\nI will be comparing how R Graphics, the core graphical functions of Base R and ggplot can create a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\nWhile R Graphics may simplify the code, ggplot2 is recommended for its flexibility, clarity, and efficiency in creating sophisticated graphics. With a layered approach and intuitive syntax based on The Grammar of Graphics, ggplot2 allows for easier customization and a more concise way to build visuals, making it a preferred choice for efficient data visualization in R.\nAs mentioned by Hadley Wickham, “The transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualization, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.”"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#a-layered-grammar-of-graphics",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#a-layered-grammar-of-graphics",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "A Layered Grammar of Graphics",
    "text": "A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. The seven grammars of ggplot2 are shown in the figure below.\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colors, size, shape, or transparency.\nGeometries: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics: statistical transformations that summarizes data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-axis title, or legend background."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#geometric-objects-geom_bar",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#geometric-objects-geom_bar",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Geometric Objects: geom_bar",
    "text": "Geometric Objects: geom_bar\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#geometric-objects-geom_dotplot",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#geometric-objects-geom_dotplot",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Geometric Objects: geom_dotplot",
    "text": "Geometric Objects: geom_dotplot\nIn a dot plot, the dot’s width corresponds to the bin width (or maximum width, depending on the binning algorithm), and the dots are stacked, with each dot symbolizing a single observation.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\nNote:\n\nThe y scale is not very useful, in fact it is very misleading.\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#geometric-objects-geom_histogram",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#geometric-objects-geom_histogram",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Geometric Objects: geom_histogram()",
    "text": "Geometric Objects: geom_histogram()\nThe below code is to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nNote:\n\nNote that the default bin is 30."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Modifying a geometric object by changing geom()",
    "text": "Modifying a geometric object by changing geom()\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")\n\n\n\n\nNotes:\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline color of the bars in black"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Modifying a geometric object by changing aes()",
    "text": "Modifying a geometric object by changing aes()\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\nNote:\n\nThis approach can be used to color, fill and alpha of the geometric."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#geometric-objects-geom-density",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#geometric-objects-geom-density",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Geometric Objects: geom-density()",
    "text": "Geometric Objects: geom-density()\nThe geom-density() function calculates and displays a kernel density estimate, offering a smoothed version of a histogram. This method serves as a valuable alternative to histograms, particularly for continuous data originating from a smooth underlying distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#geometric-objects-geom_boxplot",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#geometric-objects-geom_boxplot",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Geometric Objects: geom_boxplot",
    "text": "Geometric Objects: geom_boxplot\nThe geom_boxplot() function presents a visual representation of a continuous value list. It depicts five summary statistics, including the median, two hinges, and two whiskers, while also showing individual “outlying” points separately.\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\nNotches in box plots aid in visually assessing potential differences in distribution medians. If the notches do not overlap, it indicates evidence of differing medians.\nThe following code segment generates a notched plot instead of a box plot, illustrating the distribution of Math scores based on gender.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#geometric-objects-geom_violin",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#geometric-objects-geom_violin",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Geometric Objects: geom_violin",
    "text": "Geometric Objects: geom_violin\nThe geom_violin function is specifically crafted for constructing violin plots, a method used to compare multiple data distributions. Traditional density curves face challenges when comparing numerous distributions, as their lines visually overlap. Violin plots address this issue by arranging several distributions side by side, facilitating easier comparison.\nThe provided code illustrates the creation of a violin plot depicting the distribution of Math scores categorized by gender.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#geometric-objects-geom_point",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#geometric-objects-geom_point",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Geometric Objects: geom_point()",
    "text": "Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#geom-objects-can-be-combined",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#geom-objects-can-be-combined",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "geom objects can be combined",
    "text": "geom objects can be combined\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#working-with-stat",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#working-with-stat",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Working with stat()",
    "text": "Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#working-with-stat---the-stat_summary-method",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#working-with-stat---the-stat_summary-method",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Working with stat - the stat_summary() method",
    "text": "Working with stat - the stat_summary() method\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#working-with-stat---the-geom-method",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#working-with-stat---the-geom-method",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Working with stat - the geom() method",
    "text": "Working with stat - the geom() method\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\nWarning in geom_point(stat = \"summary\", fun.y = \"mean\", colour = \"red\", :\nIgnoring unknown parameters: `fun.y`\n\n\nNo summary function supplied, defaulting to `mean_se()`"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Adding a best fit curve on a scatterplot?",
    "text": "Adding a best fit curve on a scatterplot?\nThe relationship of Maths and English grades of pupils are shown in the scatterplot below. A best fit curve can be added to improve the interpretability of this graph.\n\nWe can use geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nNote:\n\nThe default method used is loss.\n\nThe default smoothing method can be overridden with the code below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#working-with-facet_wrap",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#working-with-facet_wrap",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Working with facet_wrap()",
    "text": "Working with facet_wrap()\nfacet_wrap organizes a one-dimensional sequence of panels into a two-dimensional layout, which is often more efficient in utilizing screen space compared to facet_grid. This is particularly advantageous as most displays have a roughly rectangular shape. The provided code segment generates a trellis plot using facet_wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#facet_grid-function",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#facet_grid-function",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "facet_grid() function",
    "text": "facet_grid() function\nfacet_grid() constructs a matrix of panels based on row and column faceting variables. This is particularly beneficial when dealing with two discrete variables, and all possible combinations of these variables are present in the dataset. The following code segment generates a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#working-with-coordinate",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#working-with-coordinate",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Working with Coordinate",
    "text": "Working with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\ncoord_flip() flips the horizontal bar chart into vertical bar chart.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Changing the y- and x-axis range",
    "text": "Changing the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#working-with-theme",
    "href": "Hands-On_Ex/Hands-on_Ex01/Hands-On_Ex01.html#working-with-theme",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Working with theme",
    "text": "Working with theme\ntheme_gray():\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\ntheme_classic():\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\ntheme_minimal():\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, I will delve into various ggplot2 extensions, including the tools to craft more sophisticated and impactful statistical graphics. The goals of this exercise is to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-importing-r-packages",
    "href": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-importing-r-packages",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "Installing and importing R packages",
    "text": "Installing and importing R packages\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\n\n\n\n\n\n\nggrepel\nprovides geoms for ggplot2 to repel overlapping text labels.\n\n\nggthemes\nprovides some extra themes, geoms, and scales for ‘ggplot2’.\n\n\nhrbrthemes\nprovides typography-centric themes and theme components for ggplot2.\n\n\npatchwork\nfor preparing composite figure created using ggplot2.\n\n\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-the-data",
    "href": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-the-data",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "Importing the data",
    "text": "Importing the data\nIn this exercise, I will work with a file named Exam_data. This file contains the year-end examination grades of a group of primary 3 students from a local school, and it’s saved in a format called CSV. To bring this data into R, we use a piece of code. This code uses a function called read_csv() from a package called readr, which is part of a collection of packages known as tidyverse.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThere are a total of seven attributes in the exam_data tibble data frame.\n\n\n\nCategorical Attributes\n\n\n\n\nID\n\n\nCLASS\n\n\nGENDER\n\n\nRACE\n\n\n\n\n\n\nContinuous Attributes\n\n\n\n\nMATHS\n\n\nENGLISH\n\n\nSCIENCE"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#using-ggrepel",
    "href": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#using-ggrepel",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "Using ggrepel",
    "text": "Using ggrepel\nBy replacing the following:\n\ngeom_text() with geom_text_repel(), and\ngeom_label() with geom_label_repel(),\n\nvisualization is clearer.\n\nThe PlotThe Code\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "Working with ggtheme package",
    "text": "Working with ggtheme package\nggthemes provide ’ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, 'Stata', 'Excel', and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used. It also provides some extra geoms and scales for 'ggplot2'. Consult this vignette to learn more.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "href": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "Working with hrbthems package",
    "text": "Working with hrbthems package\nThe hrbrthemes package offers a foundational design for graphics that pays attention to text-related elements, like where labels are positioned and the choice of fonts. In simpler terms, it provides a style template for your plots with a focus on how text looks and where it is located on the graph.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second objective is all about making work more efficient in a production workflow. Essentially, the context for using the elements of hrbrthemes is within this workflow, where you’re creating and producing things. In the next code chunk, the following will be done:\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "href": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "Creating Composite Graphics: pathwork methods",
    "text": "Creating Composite Graphics: pathwork methods\nSeveral functions in ggplot2 extensions help prepare composite figures by combining multiple graphs. Examples include `grid.arrange()` in the gridExtra package and `plot_grid()` in the cowplot package. In this section, an introduction to a ggplot2 extension called patchwork, specifically designed for merging separate ggplot2 graphs into a single figure, will be shown.\nThe patchwork package has a straightforward syntax for creating layouts, which can easily make:\n\nA two-column layout using the plus sign `+`.\nSubplot groups using parentheses `()`.\nA two-row layout using the division sign `/`."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "Combining two ggplot2 graphs",
    "text": "Combining two ggplot2 graphs\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\np1 + p2"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "Combining three ggplot2 graphs",
    "text": "Combining three ggplot2 graphs\nMore complex composite figures can be created by using suitable operators. For instance, the composite figure below is plotted using the following operators:\n- The “|” operator to stack two ggplot2 graphs.\n- The “/” operator to place the plots beside each other.\n- The “()” operator to define the sequence of the plotting.\nThis link provides more information.\n\nThe PlotThe Code\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n(p1 / p2) | p3"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "Creating a composite figure with tag",
    "text": "Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nThe PlotThe Code\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "href": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "Creating figure with insert",
    "text": "Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, one or several plots or graphic elements can be placed freely on top or below another plot.\n\nThe PlotThe Code\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-On_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "Creating a composite figure by using patchwork and ggtheme",
    "text": "Creating a composite figure by using patchwork and ggtheme\nThe figure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe PlotThe Code\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html",
    "title": "In Class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this in-class exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#loading-r-packages",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#loading-r-packages",
    "title": "In Class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this in-class exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#importing-pisa-data",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#importing-pisa-data",
    "title": "In Class Exercise 1: Now You See It!",
    "section": "Importing PISA data",
    "text": "Importing PISA data\nThe code chunk below uses read_sas() of haven to import PISA data into R environment.\n\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "title": "Take Home Exercise 1: Exploring Disparities in Singapore Schools",
    "section": "",
    "text": "OECD education director Andreas Schleicher shared in a BBC article that “Singapore managed to achieve excellence without wide differences between children from wealthy and disadvantaged families.” (2016) Furthermore, several Singapore’s Minister for Education also started an “every school a good school” slogan. The general public, however, strongly belief that there are still disparities that exist, especially between the elite schools and neighborhood school, between students from families with higher socioeconomic status and those with relatively lower socioeconomic status and immigration and non-immigration families."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#loading-r-packages",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#loading-r-packages",
    "title": "Take Home Exercise 1: Exploring Disparities in Singapore Schools",
    "section": "Loading R packages",
    "text": "Loading R packages\n\npacman::p_load(tidyverse, haven, ggrepel, patchwork, ggthemes, hrbrthemes)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#the-data",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#the-data",
    "title": "Take Home Exercise 1: Exploring Disparities in Singapore Schools",
    "section": "The Data",
    "text": "The Data\nThere are a total of 5 data sets provided in the PISA 2022 data set. However, only the student questionnaire data file will be used for this assignment. Besides the data files, there is a collection of complementary materials such as questionnaires, codebooks, compendia and the rescaled indices for trend analyses in this page too. PISA 2022 Technical Report provides more information about the PISA 2022 survey."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-pisa-data",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-pisa-data",
    "title": "Take Home Exercise 1: Exploring Disparities in Singapore Schools",
    "section": "Importing PISA data",
    "text": "Importing PISA data\nThe code chunk below uses read_sas() of haven to import PISA data into R environment.\n\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%   \n  filter(CNT == \"SGP\")\n\n\nwrite_rds(stu_qqq_SG,           \n          \"data/stu_qqq_SG.rds\")\n\nBy executing the provided code below, data is filtered to include only instances where the country code corresponds to Singapore.\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#choosing-relevant-variables",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#choosing-relevant-variables",
    "title": "Take Home Exercise 1: Exploring Disparities in Singapore Schools",
    "section": "Choosing relevant variables",
    "text": "Choosing relevant variables\nFirst, only relevant variables useful for the study will be included. This is important for precision, resource efficiency, and valid results. It ensures alignment with the research. The variables that will be used include:\n\n\n\nVariable Code\nVariable Name\n\n\n\n\nCNTSCHID\nSchool_ID\n\n\nCNTSTUID\nStudent_ID\n\n\nST004D01T\nGender\n\n\nPV1MATH\nMath_Score\n\n\nPV1READ\nReading_Score\n\n\nPV1SCIE\nScience_Score\n\n\nESCS\nSocioeconomic_Stat\n\n\nST251Q07JA\nArtwork\n\n\n\nThe code chunk below filters these variables.\n\nstu_qqq_eda &lt;- stu_qqq_SG %&gt;%\n  select(CNTSCHID,CNTSTUID,ST004D01T, PV1MATH, PV1READ, PV1SCIE, ST250Q01JA, ST250Q03JA, ST251Q07JA, ESCS)%&gt;%\n  rename(c(Gender=\"ST004D01T\", \n           School_ID=\"CNTSCHID\", \n           Student_ID=\"CNTSTUID\",\n           Math_Score=\"PV1MATH\",\n           Reading_Score=\"PV1READ\",\n           Science_Score=\"PV1SCIE\",\n           Own_Room=\"ST250Q01JA\",\n           Edu_App=\"ST250Q03JA\",\n           Artwork=\"ST251Q07JA\",\n           Socioeconomic_Stat=\"ESCS\"))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#changing-data-types",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#changing-data-types",
    "title": "Take Home Exercise 1: Exploring Disparities in Singapore Schools",
    "section": "Changing Data Types",
    "text": "Changing Data Types\nNext, the below code chunk converts variables to factors. This is done when dealing with categorical or nominal data. Factors are useful for representing categorical variables in statistical analyses, as they allow for better handling.\n\nstu_qqq_eda$School_ID = as.factor(stu_qqq_eda$School_ID)\nstu_qqq_eda$Gender = as.factor(stu_qqq_eda$Gender)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#recode-variables",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#recode-variables",
    "title": "Take Home Exercise 1: Exploring Disparities in Singapore Schools",
    "section": "Recode Variables",
    "text": "Recode Variables\nRecoding variables is necessary to make it more useful and comprehensible. This helps with analysis as it improves research quality. For instance, the code chunks provided below recodes each variable into new values. Lets take gender as an example, since the data provides us with values of 1 and 2 as indications for female and male, it is hard to understand what this means without the actual questionnaire or raw data. Thus, it is our job to make it easier to understand for readers.\n\nGenderArtworkSocioeconomic Status\n\n\n\nstu_qqq_eda &lt;- stu_qqq_eda %&gt;%\n  mutate(Gender=(recode(Gender, '1'=\"Female\", '2'=\"Male\")))\n\n\n\n\nstu_qqq_eda$Artwork &lt;- factor(stu_qqq_eda$Artwork,\n                               levels = c(1,2,3,4),\n                               labels = c(\"None\",\"One\",\"Two\",\"Three+\"))\nstu_data_artwork &lt;- stu_qqq_eda[!is.na(stu_qqq_eda$Artwork), ]\n\n\n\n\nstu_qqq_socio &lt;- stu_qqq_eda %&gt;%\n  select(Math_Score, Science_Score, Reading_Score, Socioeconomic_Stat) %&gt;%\n  drop_na()"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#academic-performance",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#academic-performance",
    "title": "Take Home Exercise 1: Exploring Disparities in Singapore Schools",
    "section": "Academic Performance",
    "text": "Academic Performance\nThis analysis aims to provide a thorough examination of students’ academic performance, offering insights into the distribution across different subjects. To achieve this, a histogram is created for each subject, visually displaying the distribution of scores. Within each histogram, the mean and median values are highlighted, providing a clear representation of the central tendency of the data.\n\nMathematicsReadingScience\n\n\n\n\nShow code\nggplot(data=stu_qqq_eda, \n       aes(x=Math_Score)) +\n  geom_histogram(color= \"grey10\",\n           fill= '#ADD0B3') +\n  labs(x = \"Math Scores\",\n       y =\"Number of Students\",\n       title= \"Distribution of Student Math Scores\") +\n  geom_vline(aes(xintercept=median(stu_qqq_eda$Math_Score, na.rm = T)), \n             color=\"#FFFFFF\", \n             linewidth=1, \n             linetype=\"dashed\") + \n  annotate(\"text\", \n           x=675, \n           y=60, \n          label= paste(\"Median =\", round(median(stu_qqq_eda$Math_Score, na.rm = T), 3)), \n           color= \"white\", \n           size=4,\n           ) +\n  geom_vline(aes(xintercept=mean(stu_qqq_eda$Math_Score, na.rm = T)),\n             colour=\"black\",\n             linewidth=1,\n             linetype=\"dashed\") +\n  annotate(\"text\",\n           x=495,\n           y=50,\n           label=paste(\"Mean =\", round(mean(stu_qqq_eda$Math_Score, na.rm = T), 3)),\n           color=\"black\",\n           size=4) +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\n\nShow code\nggplot(data=stu_qqq_eda, \n       aes(x=Reading_Score)) +\n  geom_histogram(color= \"grey10\",\n           fill= '#ADD0B3') +\n  labs(x= \"Reading Scores\",\n       y=\"Number of Students\",\n       title= \"Distribution of Student Reading Scores\") +\n  geom_vline(aes(xintercept=median(stu_qqq_eda$Reading_Score, na.rm = T)), \n             color=\"#FFFFFF\", \n             linewidth=1, \n             linetype=\"dashed\") + \n  annotate(\"text\", \n           x=650, \n           y=60, \n           label= paste(\"Median =\", round(median(stu_qqq_eda$Reading_Score, na.rm = T), 3)), \n           color= \"#FFFFFF\", \n           size=4) +\n  geom_vline(aes(xintercept=mean(stu_qqq_eda$Reading_Score, na.rm = T)),\n             colour=\"black\",\n             linewidth=1,\n             linetype=\"dashed\") +\n  annotate(\"text\",\n           x=460,\n           y=50,\n           label=paste(\"Mean =\", round(mean(stu_qqq_eda$Reading_Score, na.rm = T), 3)),\n           color=\"black\",\n           size=4) +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\n\nShow code\nggplot(data=stu_qqq_eda, \n       aes(x=Science_Score)) +\n  geom_histogram(color= \"grey10\",\n           fill= '#ADD0B3') +\n  labs(x= \"Science Scores\",\n       y=\"Number of Students\",\n       title= \"Distribution of Student Science Scores\") +\n  geom_vline(aes(xintercept=median(stu_qqq_eda$Science_Score, na.rm = T)), \n             color=\"#FFFFFF\", \n             linewidth=1, \n             linetype=\"dashed\") + \n  annotate(\"text\", \n           x=659, \n           y=60, \n           label= paste(\"Median =\", round(median(stu_qqq_eda$Science_Score, na.rm = T), 3)), \n           color= \"#FFFFFF\", \n           size=4) +\n  geom_vline(aes(xintercept=mean(stu_qqq_eda$Science_Score, na.rm = T)),\n             colour=\"black\",\n             linewidth=1,\n             linetype=\"dashed\") +\n  annotate(\"text\",\n           x=480,\n           y=50,\n           label=paste(\"Mean =\", round(mean(stu_qqq_eda$Science_Score, na.rm = T), 3)),\n           color=\"black\",\n           size=4) +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#student-performances-variations-within-schools",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#student-performances-variations-within-schools",
    "title": "Take Home Exercise 1: Exploring Disparities in Singapore Schools",
    "section": "Student Performances Variations Within Schools",
    "text": "Student Performances Variations Within Schools\nThis analysis delves into the variations in student performances within schools in Singapore, showing the diversity of academic achievements within educational institutions. The below code chunk begins by grouping the data based on the unique school IDs. Then, it calculates the average scores for each subject, creating new variables. Only distinct combinations of school IDs and their corresponding average scores for each subject are included.\n\nstu_sch &lt;- stu_qqq_eda %&gt;%\n  group_by(School_ID) %&gt;%\n  mutate(math_avg = mean(Math_Score),\n         science_avg = mean(Science_Score),\n         reading_avg = mean(Reading_Score)) %&gt;%\n  select(School_ID, math_avg, science_avg, reading_avg) %&gt;%\n  unique() \n\nBelow shows the histograms of the different average scores for each subject across different schools. The histogram is customized with 30 bins, with a customized color scheme, and median labels and values. This provides a comprehensive view of how average scores vary within schools for each subject.\n\nMathematicsReadingScience\n\n\n\n\nShow code\nsch_math &lt;- ggplot(data = stu_sch,\n       aes(x = math_avg)) +\n  geom_histogram(bins=30,\n                 color = \"grey50\",\n                 fill = \"#ADD0B3\") +\n  geom_vline(\n    aes(xintercept = median(math_avg)),\n    colour=\"black\", \n    linewidth = 0.8, \n    linetype = \"dashed\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 700, \n    y = 25,\n    label = paste(\"Median =\", round(median(stu_sch$math_avg), 3)), \n    color = \"black\"\n  ) +\n  ylim(0, 30) +\n  xlim(300,900) +\n  labs(x = \"Average Scores\", y = \"Count\", title = \"Mathematics\")\nsch_math\n\n\n\n\n\n\n\n\n\nShow code\nsch_read &lt;- ggplot(data = stu_sch,\n       aes(x = reading_avg)) +\n  geom_histogram(bins=30,\n                 color = \"grey50\",\n                 fill = \"#ADD0B3\") +\n  geom_vline(\n    aes(xintercept = median(reading_avg)),\n    colour=\"black\", \n    linewidth = 0.7, \n    linetype = \"dashed\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 700, \n    y = 25,\n    label = paste(\"Median =\", round(median(stu_sch$reading_avg), 3)), \n    color = \"black\"\n  ) +\n    ylim(0, 35) +\n    xlim(300,900) +\n  labs(x = \"Average Scores\", y = \"Count\", title = \"Reading\")\nsch_read\n\n\n\n\n\n\n\n\n\nShow code\nsch_sci &lt;- ggplot(data = stu_sch,\n       aes(x = science_avg)) +\n  geom_histogram(bins=30,\n                 color = \"grey50\",\n                 fill = \"#ADD0B3\") +\n  geom_vline(\n    aes(xintercept = median(science_avg)),\n    colour=\"black\", \n    linewidth = 0.7, \n    linetype = \"dashed\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 700, \n    y = 25,\n    label = paste(\"Median =\", round(median(stu_sch$science_avg), 3)), \n    color = \"black\"\n  ) +\n    ylim(0, 35) +\n    xlim(300,900) +\n  labs(x = \"Average Scores\", y = \"Count\", title = \"Science\")\nsch_sci\n\n\n\n\n\n\n\n\nTo further compare and contrast these distributions, side-by-side box plots are generated. These visualizations offer a better understanding of the performance patterns in different academic subjects across various educational institutions.\n\n\nShow code\nsch_math &lt;- ggplot(data=stu_sch,\n       aes(y = math_avg)) +\n  geom_boxplot(width=0.1, outlier.colour = \"#137a63\") +\n  stat_summary(aes(x = 0),\n               geom = \"point\",       \n               fun.y = \"mean\",\n               shape = 18,\n               colour = \"#ADD0B3\", \n               size = 3.5) +\n  xlim(c(-.1,.1))+\n  scale_x_continuous(NULL, breaks = NULL) +\n  labs(y = \"Math Average\", title = \"\")\n\nsch_read &lt;- ggplot(data=stu_sch,\n       aes(y = reading_avg)) +\n  geom_boxplot(width=0.1, outlier.colour = \"#137a63\") +\n  stat_summary(aes(x = 0),\n               geom = \"point\",       \n               fun.y = \"mean\", \n               shape = 18,\n               colour = \"#ADD0B3\", \n               size = 3.5) +\n  xlim(c(-.1,.1))+\n  scale_x_continuous(NULL, breaks = NULL) +\n  labs(y = \"Reading Average\", title = \"\")\n\nsch_sci &lt;- ggplot(data=stu_sch,\n       aes(y = science_avg)) +\n  geom_boxplot(width=0.1, outlier.colour = \"#137a63\") +\n  stat_summary(aes(x = 0),\n               geom = \"point\",       \n               fun.y = \"mean\",  \n               shape = 18,\n               colour = \"#ADD0B3\", \n               size = 3.5) +\n  xlim(c(-.1,.1)) +\n  scale_x_continuous(NULL, breaks = NULL) +\n  labs(y = \"Science Average\", title = \"\")\n\nsch_math + sch_read + sch_sci\n\n\n\n\n\nThe results above reveal that there are no substantial differences in average scores across the three subjects. However, the presence of outliers indicates instances of both exceptional and underperformance within certain schools for each respective subject. These outliers are important data points that highlight differences in academic performance among various schools. They show variations in how well or poorly schools perform in different subjects."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#differences-in-student-performance-among-genders",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#differences-in-student-performance-among-genders",
    "title": "Take Home Exercise 1: Exploring Disparities in Singapore Schools",
    "section": "Differences in Student Performance Among Genders",
    "text": "Differences in Student Performance Among Genders\nSimilar to the previous analysis, this one explores variations in academic performance between male and female students, aiming to identify any notable differences in their scores across different subjects.\n\n\nShow code\ngender_math &lt;- ggplot(data = stu_qqq_eda,\n       aes(x = Gender,\n           y = Math_Score)) +\n  geom_boxplot(color=\"grey50\",\n               fill=\"#ADD0B3\") +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"#137a63\",          \n             size=3) +\n  ylim(0,1000) +\n  labs(x = \"\", y = \"Score\", title = \"Mathematics\", axis.title.y = element_blank())\n\ngender_read &lt;- ggplot(data = stu_qqq_eda,\n       aes(x = Gender,\n           y = Reading_Score)) +\n  geom_boxplot(color=\"grey50\",\n               fill=\"#ADD0B3\") +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"#137a63\",          \n             size=3) +\n  ylim(0,1000) +\n  labs(x = \"\", title = \"Reading\") +\n  theme(axis.text.y = element_blank(), axis.title.y = element_blank())\n\ngender_sci &lt;- ggplot(data = stu_qqq_eda,\n       aes(x = Gender,\n           y = Science_Score)) +\n  geom_boxplot(color=\"grey50\",\n               fill=\"#ADD0B3\") +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"#137a63\",          \n             size=3) +\n  ylim(0,1000) +\n  labs(x = \"\", title = \"Science\") +\n  theme(axis.text.y = element_blank(), axis.title.y = element_blank())\n\ngender_math + gender_read + gender_sci\n\n\n\n\n\nThe boxplots reveal several insights into the performance of male and female students across different subjects. Notably, female students exhibit stronger performance in Reading, while male students demonstrate higher scores in Mathematics and Science. Despite these differences, the means and medians for each subject appear to be similar between both genders. Additionally, there is a noticeable presence of outliers, especially towards the lower scores, which indicates below-average performances."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#socioeconomic-status",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#socioeconomic-status",
    "title": "Take Home Exercise 1: Exploring Disparities in Singapore Schools",
    "section": "Socioeconomic Status",
    "text": "Socioeconomic Status\nNow, we will dive into the relationship between socioeconomic status and students performances. There are numerous variables in the dataset that can be used to be indicators of socioeconomic status, however this study will only be focused on the three:\n\nResidential Assests - whether or not a personal room is owned\nEducational Apps - whether or not extra investment is made for educational purposes\nArtworks - how many works of arts (ex: paintings, sculptures, etc) present in the household\n\n\nResidential Assets\nIn this part, socioeconomic status will be assessed by examining whether individuals in Singapore have a personal room. In the context of limited living conditions, having one’s own room is considered a luxury, making it a significant indicator of economic well-being.\n\nMathematicsReadingScience\n\n\n\n\nShow code\nmath_room &lt;- ggplot(data = stu_data_own_room,\n       aes(x = as.factor(Own_Room),\n           y = Math_Score)) +\n  geom_boxplot(color = \"grey50\",\n               fill = \"#ADD0B3\") +\n  geom_point(stat = \"summary\",\n             fun.y = \"mean\",\n             colour = \"#137a63\",\n             size = 3) +\n  ylim(0, 1000) +\n  labs(x = \"Room Status\",\n       y = \"\",\n       title = \"Mathematics\",\n       axis.title.y = element_blank())\nmath_room\n\n\n\n\n\n\n\n\n\nShow code\nreading_room &lt;- ggplot(data = stu_data_own_room,\n       aes(x = as.factor(Own_Room),\n           y = Reading_Score)) +\n  geom_boxplot(color = \"grey50\",\n               fill = \"#ADD0B3\") +\n  geom_point(stat = \"summary\",\n             fun.y = \"mean\",\n             colour = \"#137a63\",\n             size = 3) +\n  ylim(0, 1000) +\n  labs(x = \"Room Status\",\n       y = \"\",\n       title = \"Reading\",\n       axis.title.y = element_blank())\nreading_room\n\n\n\n\n\n\n\n\n\nShow code\nscience_room &lt;- ggplot(data = stu_data_own_room,\n       aes(x = as.factor(Own_Room),\n           y = Science_Score)) +\n  geom_boxplot(color = \"grey50\",\n               fill = \"#ADD0B3\") +\n  geom_point(stat = \"summary\",\n             fun.y = \"mean\",\n             colour = \"#137a63\",\n             size = 3) +\n  ylim(0, 1000) +\n  labs(x = \"Room Status\",\n       y = \"\",\n       title = \"Science\",\n       axis.title.y = element_blank())\nscience_room\n\n\n\n\n\n\n\n\nFor a more effective comparison, the below code arranges the boxplots to be displayed side by side, providing a clearer contrast.\n\n\nShow code\nmath_room + reading_room + science_room\n\n\n\n\n\nExamining the relationship of room ownership and student performance, the analysis suggests that individuals owning their own rooms tend to have higher average scores compared to those who don’t. However, room status may not be a decisive indicator for academic scores, as the differences observed are relatively modest. It is important to note that there are substantial outliers among the dataset, indicating a diverse range of academic outcomes within this group. This suggests that while room ownership may play a role, it is not the sole determinant of performance, and other factors may contribute to the student scores.\n\n\nEducational platforms\nAccess to educational platforms can be a marker of socioeconomic welfare, reflecting an investment in learning resources. These platforms help people keep learning and gaining new skills. Having them at home does not only show a commitment to progress, but it also shows the capability of a household to put in extra, even when not needed.\n\nMathematicsReadingScience\n\n\n\n\nShow code\nmath_app &lt;- ggplot(data = stu_data_edu_app,\n       aes(x = as.factor(Edu_App),\n           y = Math_Score)) +\n  geom_boxplot(color = \"grey50\",\n               fill = \"#ADD0B3\") +\n  geom_point(stat = \"summary\",\n             fun.y = \"mean\",\n             colour = \"#137a63\",\n             size = 3) +\n  ylim(0, 1000) +\n  labs(x = \"Educational App\",\n       y = \"\",\n       title = \"Mathematics\",\n       axis.title.y = element_blank())\nmath_app\n\n\n\n\n\n\n\n\n\nShow code\nreading_app &lt;- ggplot(data = stu_data_edu_app,\n       aes(x = as.factor(Edu_App),\n           y = Reading_Score)) +\n  geom_boxplot(color = \"grey50\",\n               fill = \"#ADD0B3\") +\n  geom_point(stat = \"summary\",\n             fun.y = \"mean\",\n             colour = \"#137a63\",\n             size = 3) +\n  ylim(0, 1000) +\n  labs(x = \"Educational App\",\n       y = \"\",\n       title = \"Reading\",\n       axis.title.y = element_blank())\nreading_app\n\n\n\n\n\n\n\n\n\nShow code\nscience_app &lt;- ggplot(data = stu_data_edu_app,\n       aes(x = as.factor(Edu_App),\n           y = Science_Score)) +\n  geom_boxplot(color = \"grey50\",\n               fill = \"#ADD0B3\") +\n  geom_point(stat = \"summary\",\n             fun.y = \"mean\",\n             colour = \"#137a63\",\n             size = 3) +\n  ylim(0, 1000) +\n  labs(x = \"Educational App\",\n       y = \"\",\n       title = \"Science\",\n       axis.title.y = element_blank())\nscience_app\n\n\n\n\n\n\n\n\n\n\nShow code\nmath_app + reading_app + science_app\n\n\n\n\n\nAnalyzing the relationship between the use of educational platforms and student performance, the findings indicate that individuals with educational platforms tend to achieve higher average scores compared to those who don’t utilize such resources. Similar to the results of room ownership, the dataset reveals significant outliers, suggesting a vairety of performances within both groups.\n\n\nArtworks\nThe presence of paintings and sculptures at home can show how well-off a family is. When individuals can afford and like art, it often means they have enough money. Families with higher incomes may choose to buy art as a way to show off or express their cultural interests. On the other hand, families with less money might prioritize spending on essential things and not buy artworks.\n\nMathematicsReadingsScience\n\n\n\n\nShow code\nmath_artwork &lt;- ggplot(data = stu_data_artwork,\n       aes(x = as.factor(Artwork),\n           y = Math_Score)) +\n  geom_boxplot(color = \"grey50\",\n               fill = \"#ADD0B3\") +\n  geom_point(stat = \"summary\",\n             fun.y = \"mean\",\n             colour = \"#137a63\",\n             size = 3) +\n  ylim(0, 1000) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Math\",\n       axis.title.y = element_blank())\nmath_artwork\n\n\n\n\n\n\n\n\n\nShow code\nreading_artwork &lt;- ggplot(data = stu_data_artwork,\n       aes(x = as.factor(Artwork),\n           y = Reading_Score)) +\n  geom_boxplot(color = \"grey50\",\n               fill = \"#ADD0B3\") +\n  geom_point(stat = \"summary\",\n             fun.y = \"mean\",\n             colour = \"#137a63\",\n             size = 3) +\n  ylim(0, 1000) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Reading\",\n       axis.title.y = element_blank())\nreading_artwork\n\n\n\n\n\n\n\n\n\nShow code\nscience_artwork &lt;- ggplot(data = stu_data_artwork,\n       aes(x = as.factor(Artwork),\n           y = Science_Score)) +\n  geom_boxplot(color = \"grey50\",\n               fill = \"#ADD0B3\") +\n  geom_point(stat = \"summary\",\n             fun.y = \"mean\",\n             colour = \"#137a63\",\n             size = 3) +\n  ylim(0, 1000) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Science\",\n       axis.title.y = element_blank())\nscience_artwork\n\n\n\n\n\n\n\n\n\n\nShow code\npatchwork &lt;- (math_artwork / reading_artwork) | science_artwork\npatchwork\n\n\n\n\n\nBased on the results above, although there is a slightly higher average score among students who own a greater number of artworks, the variations across the data are not substantial. The observed differences in scores remain relatively similar, thus limiting the results of this analysis. for those who owns a higher number of artwork is higher, the students performance do not vary a lot with the different number of artworks owned at home."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#socioeconomic-status-1",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#socioeconomic-status-1",
    "title": "Take Home Exercise 1: Exploring Disparities in Singapore Schools",
    "section": "Socioeconomic Status",
    "text": "Socioeconomic Status\nNow, we will dive into the relationship between socioeconomic status and students performances. There are numerous variables in the dataset that can be used to be indicators of socioeconomic status, however this study will only be focused on the three:\n\nEconomic, Social and Cultural Status - holistic view of an individual or community’s position and resources\nArtworks - how many works of arts (ex: paintings, sculptures, etc) present in the household\n\n\nEconomic, Social and Cultural Status\nThe code below shows a brief summary of the dataset for socioeconomic status.\n\nsummary(stu_qqq_eda$Socioeconomic_Stat)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n-3.5488 -0.2327  0.4817  0.2904  0.9036  3.2780      47 \n\n\nSince there are results that show NA values, this is removed during data wrangling. The below code chunk shows the summary after the deletion of unnecessary data.\n\nsummary(stu_qqq_socio)\n\n   Math_Score    Science_Score   Reading_Score   Socioeconomic_Stat\n Min.   :218.6   Min.   :187.5   Min.   :135.9   Min.   :-3.5488   \n 1st Qu.:504.2   1st Qu.:496.4   1st Qu.:478.5   1st Qu.:-0.2327   \n Median :583.3   Median :569.5   Median :553.6   Median : 0.4817   \n Mean   :574.9   Mean   :561.5   Mean   :545.2   Mean   : 0.2904   \n 3rd Qu.:648.7   3rd Qu.:631.4   3rd Qu.:620.1   3rd Qu.: 0.9036   \n Max.   :943.0   Max.   :873.3   Max.   :859.5   Max.   : 3.2780   \n\n\nThe distribution of the socioeconomic standings can be seen from the histogram below.\n\n\nShow code\nggplot(data = stu_qqq_socio,\n       aes(x = Socioeconomic_Stat)) +\n  geom_histogram(color = \"grey50\", fill = \"#ADD0B3\", bins = 30) +\n  geom_vline(aes(xintercept = mean(Socioeconomic_Stat)), color = \"#137a63\", linetype = \"dashed\", size = 1) +\n  labs(x = \"Social Economic Standing\", y = \"Frequency\", title = \"Distribution of Socioeconomic Status\") +\n  theme_minimal()\n\n\n\n\n\n\n\nShow code\ncor1 &lt;- round(cor(stu_qqq_socio$Math_Score, stu_qqq_socio$Socioeconomic_Stat),2)\ncor2 &lt;- round(cor(stu_qqq_socio$Reading_Score, stu_qqq_socio$Socioeconomic_Stat),2)\ncor3 &lt;- round(cor(stu_qqq_socio$Science_Score, stu_qqq_socio$Socioeconomic_Stat),2)\n\np1 &lt;- ggplot(data = stu_qqq_socio,\n             aes(y = Math_Score, x = Socioeconomic_Stat)) +\n  geom_point(size = 0.1, color = \"#137a63\") +\n  geom_smooth(method = lm, color = \"black\") +\n  annotate(\"text\", x = -2, y = 800, label = paste0(\"r = \", cor1), color = 'black')\n\np2 &lt;- ggplot(data = stu_qqq_socio,\n       aes(y = Reading_Score, x = Socioeconomic_Stat)) +\n  geom_point(size = 0.1, color = \"#137a63\")+\n  geom_smooth(method = lm, color = \"black\") + \n  annotate(\"text\", x = -2, y = 800, label = paste0(\"r = \", cor2), color = 'black')\n\np3 &lt;- ggplot(data = stu_qqq_socio,\n       aes(y = Science_Score, x = Socioeconomic_Stat)) +\n  geom_point(size = 0.1, color = \"#137a63\")+\n  geom_smooth(method = lm, color = \"black\") +\n  annotate(\"text\", x = -2, y = 800, label = paste0(\"r = \", cor3), color = 'black')\n\np1/p2/p3\n\n\n\n\n\nThe scatter plots reveal a notable dispersion of data points across various levels of socioeconomic standing. Despite this dispersion, a consistent pattern emerges, with correlation coefficients indicating a medium positive relationship between socioeconomic status and academic performance. Specifically, the correlation coefficient of approximately 0.41~0.42 suggests that as students exhibit higher socioeconomic standing, a corresponding increase in their academic scores is observed. This highlights a noticable association between socioeconomic factors and students’ academic achievements.\n\n\nArtworks\nThe presence of paintings and sculptures at home can show how well-off a family is. When individuals can afford and like art, it often means they have enough money. Families with higher incomes may choose to buy art as a way to show off or express their cultural interests. On the other hand, families with less money might prioritize spending on essential things and not buy artworks.\n\nDistributionMathematicsReadingsScience\n\n\n\n\nShow code\nart_dist &lt;- ggplot(data = stu_data_artwork,\n       aes(x = Artwork)) +\n  geom_histogram(stat = \"count\",\n                 color = \"#137a63\",\n                 fill = \"#ADD0B3\") +\n  labs(y = \"Count\", x = \"Number of Artworks\")\nart_dist\n\n\n\n\n\n\n\n\n\nShow code\nmath_artwork &lt;- ggplot(data = stu_data_artwork,\n       aes(x = as.factor(Artwork),\n           y = Math_Score)) +\n  geom_violin(color = \"grey50\",\n              fill = \"#ADD0B3\") +\n  geom_point(stat = \"summary\",\n             fun.y = \"mean\",\n             colour = \"#137a63\",\n             size = 3) +\n  geom_hline(yintercept = mean(stu_data_artwork$Math_Score), \n             linetype = \"dashed\",\n             color = \"black\") +\n  ylim(0, 1000) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Math\",\n       axis.title.y = element_blank())\nmath_artwork\n\n\n\n\n\n\n\n\n\nShow code\nreading_artwork &lt;- ggplot(data = stu_data_artwork,\n       aes(x = as.factor(Artwork),\n           y = Reading_Score)) +\n  geom_violin(color = \"grey50\",\n              fill = \"#ADD0B3\") +\n  geom_point(stat = \"summary\",\n             fun.y = \"mean\",\n             colour = \"#137a63\",\n             size = 3) +\n  geom_hline(yintercept = mean(stu_data_artwork$Reading_Score), \n             linetype = \"dashed\",\n             color = \"black\") +\n  ylim(0, 1000) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Reading\",\n       axis.title.y = element_blank())\nreading_artwork\n\n\n\n\n\n\n\n\n\nShow code\nscience_artwork &lt;- ggplot(data = stu_data_artwork,\n       aes(x = as.factor(Artwork),\n           y = Science_Score)) +\n  geom_violin(color = \"grey50\",\n              fill = \"#ADD0B3\") +\n  geom_point(stat = \"summary\",\n             fun.y = \"mean\",\n             colour = \"#137a63\",\n             size = 3) +\n  geom_hline(yintercept = mean(stu_data_artwork$Science_Score), \n             linetype = \"dashed\",\n             color = \"black\") +\n  ylim(0, 1000) +\n  labs(x = \"\",\n       y = \"\",\n       title = \"Science\",\n       axis.title.y = element_blank())\nscience_artwork\n\n\n\n\n\n\n\n\n\n\nShow code\npatchwork &lt;- (art_dist / math_artwork) | (reading_artwork / science_artwork)\npatchwork\n\n\n\n\n\nBased on the results above, although there is a slightly higher average score among students who own a greater number of artworks, the variations across the data are not substantial. The observed differences in scores remain relatively similar, thus limiting the results of this analysis. for those who owns a higher number of artwork is higher, the students performance do not vary a lot with the different number of artworks owned at home."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "This exercise will focus on creating interactive data visualisation by using functions provided by:\n\nggiraph\nplotlyr"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#installing-and-importing-r-packages",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#installing-and-importing-r-packages",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "Installing and importing R packages",
    "text": "Installing and importing R packages\nIn this exercise, the following R packages will be used:\n\n\n\n\n\n\n\nPackages\nDescription\n\n\n\n\nggiraph\nfor making ‘ggplot’ graphics interactive\n\n\nplotly\nfor plotting interactive statistical graphs\n\n\nDT\nprovides an R interface to the JavaScript library DataTables that create interactive table on html page\n\n\ntidyverse\na family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs\n\n\npatchwork\nfor combining multiple ggplot2 graphs into one figure\n\n\n\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#importing-the-data",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#importing-the-data",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "Importing the Data",
    "text": "Importing the Data\nIn this exercise, I will work with a file named Exam_data. The below code uses a function called read_csv() from a package called readr, which is part of a collection of packages known as tidyverse.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "Tooltip effect with tooltip aesthetic",
    "text": "Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. First, a ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object, which allows users to hover the mouse pointer on a data point of interest to display the student’s ID.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#displaying-multiple-information-on-tooltip",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#displaying-multiple-information-on-tooltip",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "Displaying multiple information on tooltip",
    "text": "Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nThe first three lines of the above code create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in line 7. By hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#customising-tooltip-style",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#customising-tooltip-style",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "Customising Tooltip style",
    "text": "Customising Tooltip style\nThe code below uses opts_tooltip() of ggiraph to customize tooltip rendering by adding css declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\nThe background colour of the tooltip is black and the font colour is white and bold. This link provides more about how to customise ggiraph objects."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#displaying-statistics-on-tooltip",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#displaying-statistics-on-tooltip",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "Displaying statistics on tooltip",
    "text": "Displaying statistics on tooltip\nA way to customise tooltip can be seen below. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "Hover effect with data_id aesthetic",
    "text": "Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id. Elements associated with a data_id, such as CLASS will be highlighted upon mouse over.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default value of the hover css is hover_css = “fill:orange;”."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#styling-hover-effect",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#styling-hover-effect",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "Styling hover effect",
    "text": "Styling hover effect\nIn the code below, css codes are used to change the highlighting effect. Elements associated with a data_id, such as CLASS will be highlighted upon mouse over.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nDifferent from the previous example, this one encodes the ccs customisation request directly."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#combining-tooltip-and-hover-effect",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#combining-tooltip-and-hover-effect",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "Combining tooltip and hover effect",
    "text": "Combining tooltip and hover effect\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nThe tooltip will show the CLASS upon hovering the mouse over it, including highlights of elements associated with a data_id, such as CLASS."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#click-effect-with-onclick",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#click-effect-with-onclick",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "Click effect with onclick",
    "text": "Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web. Web document link with a data object will be displayed on the web browser upon mouse click.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "Coordinated Multiple Views with ggiraph",
    "text": "Coordinated Multiple Views with ggiraph\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nNotable points:\n\nwhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nto build coordinated multiple views, the following will be used:\n\nappropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of the patchwork package will be used inside the girafe function to create the interactive coordinated multiple views.\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when hovering over data points with the mouse."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "Creating an interactive scatter plot: plot_ly() method",
    "text": "Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example of a basic interactive plot created by using plot_ly().\n\nThe plotThe code chunk\n\n\n\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "Working with visual variable: plot_ly() method",
    "text": "Working with visual variable: plot_ly() method\nThe color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe plotThe code chunk\n\n\n\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\nInteractive:\n\nClick on the colour symbol at the legend.\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "Creating an interactive scatter plot: ggplotly() method",
    "text": "Creating an interactive scatter plot: ggplotly() method\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\nThe only extra line that needs to be ncluded in the code chunk is ggplotly()."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#coordinated-multiple-views-with-plotly",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "Coordinated Multiple Views with plotly",
    "text": "Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\nHighlights:\n\nhighlight_key() simply creates an object of class crosstalk.\nThis link teaches more about crosstalk."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#interactive-data-table-dt-package",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#interactive-data-table-dt-package",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "Interactive Data Table: DT package",
    "text": "Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#linked-brushing-crosstalk-method",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#linked-brushing-crosstalk-method",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "Linked brushing: crosstalk method",
    "text": "Linked brushing: crosstalk method\n\nThe plotThe code chunk\n\n\n\n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe code below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)  \n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#ggiraph",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#ggiraph",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "ggiraph",
    "text": "ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#plotly-for-r",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#plotly-for-r",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "plotly for R",
    "text": "plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03B.html",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03B.html",
    "title": "Hands-on Exercise 3B: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "In this exercise, we will explore the dynamic realm of animated data visualization using the gganimate and plotly R packages. Along the way, we will also pick up on:\n\nreshaping data through the tidyr package, as well as\nmastering the art of processing, wrangling, and transforming data with the dplyr package.\n\nThe focus is on creating engaging visual narratives that captivate audiences through animated graphics, leaving a deeper impression compared to static visuals.\n\n\nTo create animations, we construct numerous individual plots, each representing a specific moment, and then assemble them into a sequence, much like creating a flip book or cartoon. These separate frames, each built from a specific part of the overall data, come together to create the illusion of motion when played in succession.\n\n\n\n\nKey concepts and terminology:\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#basic-concepts-of-animation",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#basic-concepts-of-animation",
    "title": "Hands-on Exercise 3B: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "To create animations, we construct numerous individual plots, each representing a specific moment, and then assemble them into a sequence, much like creating a flip book or cartoon. These separate frames, each built from a specific part of the overall data, come together to create the illusion of motion when played in succession."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#terminology",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#terminology",
    "title": "Hands-on Exercise 3B: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "Key concepts and terminology:\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#installing-and-importing-r-packages",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#installing-and-importing-r-packages",
    "title": "Hands-on Exercise 3B: Programming Animated Statistical Graphics with R",
    "section": "Installing and importing R packages",
    "text": "Installing and importing R packages\nIn this exercise, the following R packages will be used:\n\n\n\n\n\n\n\nplotly\nfor plotting interactive statistical graphs\n\n\ngganimate\nan ggplot extension for creating animated statistical graphs\n\n\ngifski\nconverts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame\n\n\ngapminder\nan excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme\n\n\ntidyverse\na family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs\n\n\n\n\npacman::p_load(readxl, gifski, gapminder, plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#importing-the-data",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#importing-the-data",
    "title": "Hands-on Exercise 3B: Programming Animated Statistical Graphics with R",
    "section": "Importing the Data",
    "text": "Importing the Data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, both mutate_each_() and funs() were deprecated. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#building-a-static-population-bubble-plot",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#building-a-static-population-bubble-plot",
    "title": "Hands-on Exercise 3B: Programming Animated Statistical Graphics with R",
    "section": "Building a static population bubble plot",
    "text": "Building a static population bubble plot\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#building-the-animated-bubble-plot",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#building-the-animated-bubble-plot",
    "title": "Hands-on Exercise 3B: Programming Animated Statistical Graphics with R",
    "section": "Building the animated bubble plot",
    "text": "Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods include: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "Hands-on Exercise 3B: Programming Animated Statistical Graphics with R",
    "section": "Building an animated bubble plot: ggplotly() method",
    "text": "Building an animated bubble plot: ggplotly() method\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position=‘none’ should be used as shown in the plot and code chunk below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-On_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-on Exercise 3B: Programming Animated Statistical Graphics with R",
    "section": "Building an animated bubble plot: plot_ly() method",
    "text": "Building an animated bubble plot: plot_ly() method\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Rach's Visual Portfolio",
    "section": "",
    "text": "Recent Projects:\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nHands-on Exercise 6: Visualising and Analysing Time-oriented Data\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2024\n\n\nRachel Yee\n\n\n\n\n\n\n  \n\n\n\n\nTake Home Exercise 3: Be Weatherwise or Otherwise\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2024\n\n\nRachel Yee\n\n\n\n\n\n\n  \n\n\n\n\nHands-on Exercise 5A: Creating Ternary Plot with R\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 3, 2024\n\n\nRachel Yee\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "title": "Take Home Exercise 2: Peer Critique and Visualization Remake",
    "section": "",
    "text": "For this exercise, I have selected a peer’s submission for Take-home Exericse 1 and will be conducting an analysis of the charts, assessing their clarity and aesthetics, then redesigning the original visuals, applying principles and best practices in data visualization that were covered in the preceding two classes."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#installing-r-packages",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#installing-r-packages",
    "title": "Take Home Exercise 2: Peer Critique and Visualization Remake",
    "section": "Installing R packages",
    "text": "Installing R packages\n\npacman::p_load(tidyverse,haven,ggplot2,patchwork,ggrepel,ggthemes,hrbrthemes)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#data-sets",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#data-sets",
    "title": "Take Home Exercise 2: Peer Critique and Visualization Remake",
    "section": "Data Sets",
    "text": "Data Sets\n\n123456\n\n\n\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\n\n\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\n\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")\n\n\n\n\nlibrary(dplyr)\nstu_qqq_SG_filtered &lt;- stu_qqq_SG %&gt;%\n  select_if(function(x) !all(x == x[1]))\n\n\n\n\nwrite_rds(stu_qqq_SG_filtered,\n          \"data/stu_qqq_SG_filtered.rds\")\n\n\n\n\nstu_qqq_SG_filtered &lt;- read_rds(\"data/stu_qqq_SG_filtered.rds\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#data-wrangling",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#data-wrangling",
    "title": "Take Home Exercise 2: Peer Critique and Visualization Remake",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\n123\n\n\n\nstu_qqq_SG_filtered &lt;- stu_qqq_SG_filtered %&gt;%\n  mutate(\n    MATH_Score = rowMeans(select(., PV1MATH:PV10MATH), na.rm = TRUE),\n    READ_Score = rowMeans(select(., PV1READ:PV10READ), na.rm = TRUE),\n    SCIE_Score = rowMeans(select(., PV1SCIE:PV10SCIE), na.rm = TRUE)\n  )\n\n\n\n\nstu_qqq_SG_filtered &lt;- stu_qqq_SG_filtered %&gt;%\n  mutate(Gender = ifelse(ST004D01T == 1, \"Female\", \"Male\"))\n\n\n\n\nstu_qqq_SG_filtered &lt;- stu_qqq_SG_filtered %&gt;%\n  mutate(CNTSCHID = as.character(CNTSCHID))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#scores-of-the-students-from-each-subject-area",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#scores-of-the-students-from-each-subject-area",
    "title": "Take Home Exercise 2: Peer Critique and Visualization Remake",
    "section": "Scores of the Students from Each Subject Area",
    "text": "Scores of the Students from Each Subject Area\n\nOriginal Design\n\nMathReadingScience\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes (x = 1, y = MATH_Score))+\n  geom_boxplot(notch=TRUE)+\n  stat_summary(geom = \"point\", fun.y= \"mean\", colour =\"maroon\", size=2)+\n  ggtitle(\"Math Scores\")+\n  theme_hc()+\n  coord_cartesian(ylim = c(100, 900))+\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.text.x = element_blank(),axis.ticks.x = element_blank(),axis.title.x = element_blank(),axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes (x = 1, y = READ_Score))+\n  geom_boxplot(notch=TRUE)+\n  stat_summary(geom = \"point\", fun.y= \"mean\", colour =\"maroon\", size=2)+\n  ggtitle(\"Reading Scores\")+\n  theme_hc()+\n  coord_cartesian(ylim = c(100, 900))+\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.text.x = element_blank(),axis.ticks.x = element_blank(),axis.title.x = element_blank(),axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes (x = 1, y = SCIE_Score))+\n  geom_boxplot(notch=TRUE)+\n  stat_summary(geom = \"point\", fun.y= \"mean\", colour =\"maroon\", size=2)+\n  ggtitle(\"Science Scores\")+\n  theme_hc()+\n  coord_cartesian(ylim = c(100, 900))+\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.text.x = element_blank(),axis.ticks.x = element_blank(),axis.title.x = element_blank(),axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\n\nCritique\n\nClarity\n\nMore appropriate labels would give readers a better understanding, such as a title of “Distribution of Math Scores”, and a y-axis label for “Score”.\nThe notch that narrows the box around the median also seems to be unnecessary as it is too difficult to determine the exact value of it just by looking at it.\nWhile a boxplot provides a concise visual summary of the distribution including outliers, I believe that a histogram is preferred since its able to present an overall trend more intuitively with a detailed view of the entire spread of the data, while providing statistical information for readers to easily grasp.\nA disadvantage of a boxplot is that it doesn’t show individual data points, thus each observation is assumed to be equal and symmetrical in the distribution.\n\n\n\nAesthetics\n\nColors could be added to make it more visually pleasing.\nOverall graph is generally simple and clear, with a mean point and outliers included.\n\n\n\n\nSketch for Alternative Design\n\n\n\n\n\n\n\nMakeover\n\nMathReadingScience\n\n\n\n\nShow code\nggplot(data = stu_qqq_SG_filtered,\n       aes(x = MATH_Score)) +\n  geom_histogram(binwidth = 30, fill = \"skyblue\", color = \"steelblue\", alpha = 0.7) +\n  ggtitle(\"Distribution of Math Scores\") +\n  xlab(\"Scores\") +\n  ylab(\"Number of Students\") +\n  geom_vline(aes(xintercept=median(stu_qqq_SG_filtered$MATH_Score, na.rm = T)), \n             color=\"red\", \n             linewidth=1, \n             linetype=\"dashed\") + \n  annotate(\"text\", \n           x=660, \n           y=60, \n          label= paste(\"Median =\", round(median(stu_qqq_SG_filtered$MATH_Score, na.rm = T), 3)), \n           color= \"red\", \n           size=4,\n           ) +\n  geom_vline(aes(xintercept=mean(stu_qqq_SG_filtered$MATH_Score, na.rm = T)),\n             colour=\"blue\",\n             linewidth=1,\n             linetype=\"dashed\") +\n  annotate(\"text\",\n           x=495,\n           y=50,\n           label=paste(\"Mean =\", round(mean(stu_qqq_SG_filtered$MATH_Score, na.rm = T), 3)),\n           color=\"blue\",\n           size=4) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nShow code\nggplot(data = stu_qqq_SG_filtered,\n       aes(x = READ_Score)) +\n  geom_histogram(binwidth = 30, fill = \"skyblue\", color = \"steelblue\", alpha = 0.7) +\n  ggtitle(\"Distribution of Reading Scores\") +\n  xlab(\"Scores\") +\n  ylab(\"Number of Students\") +\n  geom_vline(aes(xintercept=median(stu_qqq_SG_filtered$READ_Score, na.rm = T)), \n             color=\"red\", \n             linewidth=1, \n             linetype=\"dashed\") + \n  annotate(\"text\", \n           x=650, \n           y=60, \n          label= paste(\"Median =\", round(median(stu_qqq_SG_filtered$READ_Score, na.rm = T), 3)), \n           color= \"red\", \n           size=4,\n           ) +\n  geom_vline(aes(xintercept=mean(stu_qqq_SG_filtered$READ_Score, na.rm = T)),\n             colour=\"blue\",\n             linewidth=1,\n             linetype=\"dashed\") +\n  annotate(\"text\",\n           x=460,\n           y=50,\n           label=paste(\"Mean =\", round(mean(stu_qqq_SG_filtered$READ_Score, na.rm = T), 3)),\n           color=\"blue\",\n           size=4) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nShow code\nggplot(data = stu_qqq_SG_filtered,\n       aes(x = SCIE_Score)) +\n  geom_histogram(binwidth = 30, fill = \"skyblue\", color = \"steelblue\", alpha = 0.7) +\n  ggtitle(\"Distribution of Science Scores\") +\n  xlab(\"Scores\") +\n  ylab(\"Number of Students\") +\n  geom_vline(aes(xintercept=median(stu_qqq_SG_filtered$SCIE_Score, na.rm = T)), \n             color=\"red\", \n             linewidth=1, \n             linetype=\"dashed\") + \n  annotate(\"text\", \n           x=650, \n           y=60, \n          label= paste(\"Median =\", round(median(stu_qqq_SG_filtered$SCIE_Score, na.rm = T), 3)), \n           color= \"red\", \n           size=4,\n           ) +\n  geom_vline(aes(xintercept=mean(stu_qqq_SG_filtered$SCIE_Score, na.rm = T)),\n             colour=\"blue\",\n             linewidth=1,\n             linetype=\"dashed\") +\n  annotate(\"text\",\n           x=495,\n           y=50,\n           label=paste(\"Mean =\", round(mean(stu_qqq_SG_filtered$SCIE_Score, na.rm = T), 3)),\n           color=\"blue\",\n           size=4) +\n  theme_minimal()"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#difference-in-scores-per-subject-based-on-the-students-gender",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#difference-in-scores-per-subject-based-on-the-students-gender",
    "title": "Take Home Exercise 2: Peer Critique and Visualization Remake",
    "section": "Difference in Scores per Subject Based on the Student's Gender",
    "text": "Difference in Scores per Subject Based on the Student's Gender\n\nOriginal Design\n\nMathReadingScience\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes (x = Gender, y = MATH_Score))+\n  geom_boxplot(notch=TRUE)+\n  stat_summary(geom = \"point\", fun.y= \"mean\", colour =\"maroon\", size=2)+\n  ggtitle(\"Math Scores by Gender\")+\n  theme_hc()+\n  coord_cartesian(ylim = c(100, 900))+\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.ticks.x = element_blank(),axis.title.x = element_blank(),axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes (x = Gender, y = READ_Score))+\n  geom_boxplot(notch=TRUE)+\n  stat_summary(geom = \"point\", fun.y= \"mean\", colour =\"maroon\", size=2)+\n  ggtitle(\"Reading Scores by Gender\")+\n  theme_hc()+\n  coord_cartesian(ylim = c(100, 900))+\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.ticks.x = element_blank(),axis.title.x = element_blank(),axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes (x = Gender, y = SCIE_Score))+\n  geom_boxplot(notch=TRUE)+\n  stat_summary(geom = \"point\", fun.y= \"mean\", colour =\"maroon\", size=2)+\n  ggtitle(\"Science Scores by Gender\")+\n  theme_hc()+\n  coord_cartesian(ylim = c(100, 900))+\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.ticks.x = element_blank(),axis.title.x = element_blank(),axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\n\nCritique\n\nClarity\n\nThe graph does not allow side by side comparison. To do so, patchwork can be implemented for readers to easily visualize and read.\n\n\n\nThe overall look of the boxplot is neat, with labels. However, after the patchwork, the title labels only needs the subject, with “Scores” as a y-axis label.\nThe use of the notch can be confusing for readers who are not familar to the idea of it representing the median. It might be overwhelming, thus it would be better to disregard this in the boxplots.\n\n\n\nAesthetics\n\nOther than the mean point, there are no colors are present. Since the previous histogram was filled with a light blue color, I will do the same here to make it more appealing.\nThe maroon color does not seem to match the color scheme of the website, so this will be replaced with dark blue.\nThe size of the outliers are too big, resulting in a clustered appearance, so this will be adjusted.\n\n\n\n\nSketch for Alternative Design\n\n\n\n\n\n\n\nMakeover\n\n\nShow the code\nmath &lt;- ggplot(data = stu_qqq_SG_filtered,\n       aes(x = Gender, y = MATH_Score)) +\n  geom_boxplot(fill = \"lightblue\", color = \"black\", outlier.size = 1) +\n  stat_summary(geom = \"point\", fun.y = \"mean\", color = \"darkblue\", size = 2) +\n  ggtitle(\"Mathematics\") +\n  ylab(\"Scores\") +\n  theme_minimal() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100)) +\n  labs(x = \"\", y = \"Score\", title = \"Mathematics\", axis.title.y = element_blank())\n\nread &lt;- ggplot(data = stu_qqq_SG_filtered,\n       aes(x = Gender, y = READ_Score)) +\n  geom_boxplot(fill = \"lightblue\", color = \"black\", outlier.size = 1) +\n  stat_summary(geom = \"point\", fun.y = \"mean\", color = \"darkblue\", size = 2) +\n  ggtitle(\"Reading\") +\n  xlab(\"Gender\") +\n  theme_minimal() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100)) +\n  theme(axis.text.y = element_blank(), axis.title.y = element_blank())\n\nsci &lt;- ggplot(data = stu_qqq_SG_filtered,\n       aes(x = Gender, y = SCIE_Score)) +\n  geom_boxplot(fill = \"lightblue\", color = \"black\", outlier.size = 1) +\n  stat_summary(geom = \"point\", fun.y = \"mean\", color = \"darkblue\", size = 2) +\n  ggtitle(\"Science\") +\n  ylab(\"Scores\") +\n  theme_minimal() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100)) +\n  theme(axis.title.x = element_blank(), axis.text.y = element_blank(), axis.title.y = element_blank())\n\nmath + read + sci"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#range-of-the-average-score-per-subject-per-school",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#range-of-the-average-score-per-subject-per-school",
    "title": "Take Home Exercise 2: Peer Critique and Visualization Remake",
    "section": "Range of the Average Score per Subject per School",
    "text": "Range of the Average Score per Subject per School\n\nOriginal Design\n\nObtaining Average Scores per School per SubjectMathReadingScience\n\n\n\nGet_School &lt;- stu_qqq_SG_filtered\n\nBy_School &lt;- Get_School %&gt;%\n  group_by(CNTSCHID) %&gt;%\n  summarize(\n    Avg_Math = mean(MATH_Score, na.rm = TRUE),\n    Avg_Read = mean(READ_Score, na.rm = TRUE),\n    Avg_Scie = mean(SCIE_Score, na.rm = TRUE)\n  )\n\n\n\n\n\nShow the code\nggplot(data = By_School,\n       aes(x = factor(1), y = Avg_Math)) +\n  geom_boxplot(notch = TRUE) +\n  stat_summary(geom = \"point\", fun.y = \"mean\", colour = \"maroon\", size = 2) +\n  ggtitle(\"Math Scores by School\") +\n  theme_hc() +\n  coord_cartesian(ylim = c(300, 750)) +\n  scale_y_continuous(breaks = seq(300, 750, by = 50)) +\n  theme(axis.text.x = element_blank(),axis.ticks.x = element_blank(),axis.title.x = element_blank(),axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = By_School,\n       aes(x = factor(1), y = Avg_Read)) +\n  geom_boxplot(notch = TRUE) +\n  stat_summary(geom = \"point\", fun.y = \"mean\", colour = \"maroon\", size = 2) +\n  ggtitle(\"Reading Scores by School\") +\n  theme_hc() +\n  coord_cartesian(ylim = c(300, 750)) +\n  scale_y_continuous(breaks = seq(300, 750, by = 50)) +\n  theme(axis.text.x = element_blank(),axis.ticks.x = element_blank(),axis.title.x = element_blank(),axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = By_School,\n       aes(x = factor(1), y = Avg_Scie)) +\n  geom_boxplot(notch = TRUE) +\n  stat_summary(geom = \"point\", fun.y = \"mean\", colour = \"maroon\", size = 2) +\n  ggtitle(\"Science Scores by School\") +\n  theme_hc() +\n  coord_cartesian(ylim = c(300, 750)) +\n  scale_y_continuous(breaks = seq(300, 750, by = 50)) +\n  theme(axis.text.x = element_blank(),axis.ticks.x = element_blank(),axis.title.x = element_blank(),axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\n\nCritique\n\nClarity\n\nThe critiques on clarity are more or less the same to the ones done for gender, since both have the same boxplot visual representations. Thus, to change things up a little, I will be modifying them into violin plots.\n\n\n\nAesthetics\n\nSimilar to the critique above, I will make the same amendments with the previous makeover, except that this one would be for a violin plot.\n\n\n\n\nSketch for Alternative Design\n\n\n\n\n\n\n\nMakeover\n\n\nShow the code\nmath1 &lt;- ggplot(data = By_School,\n                aes(x = factor(1), y = Avg_Math)) +\n  geom_violin(fill = \"lightblue\", color = \"black\", alpha = 0.7) +\n  geom_point(stat = \"summary\", fun.y = \"mean\", color = \"darkblue\", size = 2) +\n  ggtitle(\"Math\") +\n  theme_minimal() +\n  coord_cartesian(ylim = c(300, 750)) +\n  scale_y_continuous(breaks = seq(300, 750, by = 50)) +\n  labs(x = \"\", y = \"Score\") +\n  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())\n\n\nread1 &lt;- ggplot(data = By_School,\n       aes(x = factor(1), y = Avg_Read)) +\n  geom_violin(fill = \"lightblue\", color = \"black\", alpha = 0.7) +\n  geom_point(stat = \"summary\", fun.y = \"mean\", color = \"darkblue\", size = 2) +\n  ggtitle(\"Reading\") +\n  theme_minimal() +\n  coord_cartesian(ylim = c(300, 750)) +\n  scale_y_continuous(breaks = seq(300, 750, by = 50)) +\n  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title.x = element_blank(), axis.title.y = element_blank())\n\nsci1 &lt;- ggplot(data = By_School,\n       aes(x = factor(1), y = Avg_Scie)) +\n  geom_violin(fill = \"lightblue\", color = \"black\", alpha = 0.7) +\n  geom_point(stat = \"summary\", fun.y = \"mean\", color = \"darkblue\", size = 2) +\n  ggtitle(\"Science\") +\n  theme_minimal() +\n  coord_cartesian(ylim = c(300, 750)) +\n  scale_y_continuous(breaks = seq(300, 750, by = 50)) +\n  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title.x = element_blank(), axis.title.y = element_blank())\n\nmath1 + read1 + sci1"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#difference-in-scores-per-subject-based-on-the-students-food-security",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#difference-in-scores-per-subject-based-on-the-students-food-security",
    "title": "Take Home Exercise 2: Peer Critique and Visualization Remake",
    "section": "Difference in Scores per Subject Based on the Student's Food Security",
    "text": "Difference in Scores per Subject Based on the Student's Food Security\n\nOriginal Design\n\nMathReadingScience\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes(x=ESCS,y=MATH_Score))+\n  geom_point()+\n  geom_smooth(method=lm,\n              size=0.5)+\n  ggtitle(\"Math Score by ESCS\") +\n  theme_hc() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes(x=ESCS,y=READ_Score))+\n  geom_point()+\n  geom_smooth(method=lm,\n              size=0.5)+\n  ggtitle(\"Reading Score by ESCS\") +\n  theme_hc() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes(x=ESCS,y=SCIE_Score))+\n  geom_point()+\n  geom_smooth(method=lm,\n              size=0.5)+\n  ggtitle(\"Science Score by ESCS\") +\n  theme_hc() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\n\nCritique on Clarity and Aesthetics\n\nClarity\n\nThe title and axis labels are clear and informative\nR-squared value is absent\nReaders might not know what ESCS is, replace with socioeconomics\n\n\n\nAesthetics\n\nThe size of the points will be made smaller so the scatter plot wont seem too clustered.\nThe color is adjusted to match the previous scheme\n\n\n\n\nSketch for Alternative Design\n\n\n\n\n\n\n\nMakeover\n\nMathReadingScience\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes(x = ESCS, y = MATH_Score)) +\n  geom_point(size = 1, color = \"darkblue\") +\n  geom_smooth(method = lm, size = 1, color = \"black\") +\n  ggtitle(\"Math Score by Socioeconomic Status\") +\n  theme_minimal() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100)) +\n  theme(axis.title.y = element_blank()) +\n  annotate(\"text\", x = -2, y = 800, label = paste0(\"r = \", round(cor(stu_qqq_SG_filtered$MATH_Score, stu_qqq_SG_filtered$ESCS, use = \"complete.obs\"),2)), color = 'black')\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes(x = ESCS, y = READ_Score)) +\n  geom_point(size = 1, color = \"darkblue\") +\n  geom_smooth(method = lm, size = 1, color = \"black\") +\n  ggtitle(\"Reading Score by Socioeconomic Status\") +\n  theme_minimal() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100)) +\n  theme(axis.title.y = element_blank()) +\n  annotate(\"text\", x = -2, y = 800, label = paste0(\"r = \", round(cor(stu_qqq_SG_filtered$READ_Score, stu_qqq_SG_filtered$ESCS, use = \"complete.obs\"),2)), color = 'black')\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes(x = ESCS, y = SCIE_Score)) +\n  geom_point(size = 1, color = \"darkblue\") +\n  geom_smooth(method = lm, size = 1, color = \"black\") +\n  ggtitle(\"Science Score by ESCS\") +\n  theme_minimal() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100)) +\n  theme(axis.title.y = element_blank()) +\n  annotate(\"text\", x = -2, y = 800, label = paste0(\"r = \", round(cor(stu_qqq_SG_filtered$SCIE_Score, stu_qqq_SG_filtered$ESCS, use = \"complete.obs\"),2)), color = 'black')"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#difference-in-scores-per-subject-based-on-socioeconomic-status",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#difference-in-scores-per-subject-based-on-socioeconomic-status",
    "title": "Take Home Exercise 2: Peer Critique and Visualization Remake",
    "section": "Difference in Scores per Subject Based on Socioeconomic Status",
    "text": "Difference in Scores per Subject Based on Socioeconomic Status\n\nOriginal Design\n\nMathReadingScience\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes(x=ESCS,y=MATH_Score))+\n  geom_point()+\n  geom_smooth(method=lm,\n              size=0.5)+\n  ggtitle(\"Math Score by ESCS\") +\n  theme_hc() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes(x=ESCS,y=READ_Score))+\n  geom_point()+\n  geom_smooth(method=lm,\n              size=0.5)+\n  ggtitle(\"Reading Score by ESCS\") +\n  theme_hc() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes(x=ESCS,y=SCIE_Score))+\n  geom_point()+\n  geom_smooth(method=lm,\n              size=0.5)+\n  ggtitle(\"Science Score by ESCS\") +\n  theme_hc() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100))+\n  theme(axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\n\nCritique\n\nClarity\n\nThe title and axis labels are clear and informative.\nThe correlation value is absent, so even readers who might know what the line represents would still not be able to get this exact value just by looking at it.\nReaders might be confused to what ESCS is representing, thus it will be better if it is replaced with “Socioeconomic Status” for clearer understanding.\n\n\n\nAesthetics\n\nThe size of the points will be made smaller so the scatter plot will not seem too clustered.\nThe color of the scatter plots and the lm line will be switched for a better visualization, and is adjusted to match the previous scheme.\n\n\n\n\nSketch for Alternative Design\n\n\n\n\n\n\n\nMakeover\n\nMathReadingScience\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes(x = ESCS, y = MATH_Score)) +\n  geom_point(size = 1, color = \"darkblue\") +\n  geom_smooth(method = lm, size = 1, color = \"black\") +\n  ggtitle(\"Math Score by Socioeconomic Status\") +\n  theme_minimal() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100)) +\n  theme(axis.title.y = element_blank()) +\n  annotate(\"text\", x = -2, y = 800, label = paste0(\"r = \", round(cor(stu_qqq_SG_filtered$MATH_Score, stu_qqq_SG_filtered$ESCS, use = \"complete.obs\"),2)), color = 'black')\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes(x = ESCS, y = READ_Score)) +\n  geom_point(size = 1, color = \"darkblue\") +\n  geom_smooth(method = lm, size = 1, color = \"black\") +\n  ggtitle(\"Reading Score by Socioeconomic Status\") +\n  theme_minimal() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100)) +\n  theme(axis.title.y = element_blank()) +\n  annotate(\"text\", x = -2, y = 800, label = paste0(\"r = \", round(cor(stu_qqq_SG_filtered$READ_Score, stu_qqq_SG_filtered$ESCS, use = \"complete.obs\"),2)), color = 'black')\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = stu_qqq_SG_filtered,\n       aes(x = ESCS, y = SCIE_Score)) +\n  geom_point(size = 1, color = \"darkblue\") +\n  geom_smooth(method = lm, size = 1, color = \"black\") +\n  ggtitle(\"Science Score by ESCS\") +\n  theme_minimal() +\n  coord_cartesian(ylim = c(100, 900)) +\n  scale_y_continuous(breaks = seq(100, 900, by = 100)) +\n  theme(axis.title.y = element_blank()) +\n  annotate(\"text\", x = -2, y = 800, label = paste0(\"r = \", round(cor(stu_qqq_SG_filtered$SCIE_Score, stu_qqq_SG_filtered$ESCS, use = \"complete.obs\"),2)), color = 'black')"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html",
    "title": "Hands-on Exercise 4A: Visualising Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#installing-and-importing-r-packages",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#installing-and-importing-r-packages",
    "title": "Hands-on Exercise 4A: Visualising Distribution",
    "section": "Installing and importing R packages",
    "text": "Installing and importing R packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots, and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\npackage 'distributional' successfully unpacked and MD5 sums checked\npackage 'quadprog' successfully unpacked and MD5 sums checked\npackage 'ggdist' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Test\\AppData\\Local\\Temp\\Rtmps1zLVT\\downloaded_packages\npackage 'ggridges' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Test\\AppData\\Local\\Temp\\Rtmps1zLVT\\downloaded_packages"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#importing-the-data",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#importing-the-data",
    "title": "Hands-on Exercise 4A: Visualising Distribution",
    "section": "Importing the Data",
    "text": "Importing the Data\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#plotting-ridgeline-graph-ggridges-method",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#plotting-ridgeline-graph-ggridges-method",
    "title": "Hands-on Exercise 4A: Visualising Distribution",
    "section": "Plotting ridgeline graph: ggridges method",
    "text": "Plotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#varying-fill-colors-along-the-x-axis",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#varying-fill-colors-along-the-x-axis",
    "title": "Hands-on Exercise 4A: Visualising Distribution",
    "section": "Varying fill colors along the x axis",
    "text": "Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#mapping-the-probabilities-directly-onto-colour",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#mapping-the-probabilities-directly-onto-colour",
    "title": "Hands-on Exercise 4A: Visualising Distribution",
    "section": "Mapping the probabilities directly onto colour",
    "text": "Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges()."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#ridgeline-plots-with-quantile-lines",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#ridgeline-plots-with-quantile-lines",
    "title": "Hands-on Exercise 4A: Visualising Distribution",
    "section": "Ridgeline plots with quantile lines",
    "text": "Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#plotting-a-half-eye-graph",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#plotting-a-half-eye-graph",
    "title": "Hands-on Exercise 4A: Visualising Distribution",
    "section": "Plotting a Half Eye graph",
    "text": "Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#adding-the-boxplot-with-geom_boxplot",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#adding-the-boxplot-with-geom_boxplot",
    "title": "Hands-on Exercise 4A: Visualising Distribution",
    "section": "Adding the boxplot with geom_boxplot()",
    "text": "Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#adding-the-dot-plots-with-stat_dots",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#adding-the-dot-plots-with-stat_dots",
    "title": "Hands-on Exercise 4A: Visualising Distribution",
    "section": "Adding the Dot Plots with stat_dots()",
    "text": "Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#finishing-touch",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04A.html#finishing-touch",
    "title": "Hands-on Exercise 4A: Visualising Distribution",
    "section": "Finishing touch",
    "text": "Finishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04C.html",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04C.html",
    "title": "Hands-on Exercise 4C: Visualising Uncertainty",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#installing-and-importing-r-packages",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#installing-and-importing-r-packages",
    "title": "Hands-on Exercise 4C: Visualising Uncertainty",
    "section": "Installing and importing R packages",
    "text": "Installing and importing R packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#importing-the-data",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#importing-the-data",
    "title": "Hands-on Exercise 4C: Visualising Uncertainty",
    "section": "Importing the Data",
    "text": "Importing the Data\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#plotting-standard-error-bars-of-point-estimates",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#plotting-standard-error-bars-of-point-estimates",
    "title": "Hands-on Exercise 4C: Visualising Uncertainty",
    "section": "Plotting standard error bars of point estimates",
    "text": "Plotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#plotting-confidence-interval-of-point-estimates",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#plotting-confidence-interval-of-point-estimates",
    "title": "Hands-on Exercise 4C: Visualising Uncertainty",
    "section": "Plotting confidence interval of point estimates",
    "text": "Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "Hands-on Exercise 4C: Visualising Uncertainty",
    "section": "Visualizing the uncertainty of point estimates with interactive error bars",
    "text": "Visualizing the uncertainty of point estimates with interactive error bars\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "Hands-on Exercise 4C: Visualising Uncertainty",
    "section": "Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "title": "Hands-on Exercise 4C: Visualising Uncertainty",
    "section": "Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "Visualizing the uncertainty of point estimates: ggdist methods\n\n95% CI99% CI\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    .width = 0.95,\n    .point = \"mean\",\n    .interval = \"confidence\",\n    show.legend = FALSE) +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\"\n  )\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    .width = 0.99,\n    .point = \"mean\",\n    .interval = \"confidence\",\n    show.legend = FALSE) +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\"\n  )"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04C.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "title": "Hands-on Exercise 4C: Visualising Uncertainty",
    "section": "Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04D.html",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04D.html",
    "title": "Hands-on Exercise 4D: Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#funnelplotr-methods-the-basic-plot",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#funnelplotr-methods-the-basic-plot",
    "title": "Hands-on Exercise 4D: Funnel Plots for Fair Comparisons",
    "section": "FunnelPlotR methods: The basic plot",
    "text": "FunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`\n)\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 0 are outliers.  Plot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is \"SR\".\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#funnelplotr-methods-makeover-1",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#funnelplotr-methods-makeover-1",
    "title": "Hands-on Exercise 4D: Funnel Plots for Fair Comparisons",
    "section": "FunnelPlotR methods: Makeover 1",
    "text": "FunnelPlotR methods: Makeover 1\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers.  Plot is adjusted for overdispersion. \nThings to learn from the code chunk above. + data_type argument is used to change from default \"SR\" to \"PR\" (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#funnelplotr-methods-makeover-2",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#funnelplotr-methods-makeover-2",
    "title": "Hands-on Exercise 4D: Funnel Plots for Fair Comparisons",
    "section": "FunnelPlotR methods: Makeover 2",
    "text": "FunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers.  Plot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#computing-the-basic-derived-fields",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#computing-the-basic-derived-fields",
    "title": "Hands-on Exercise 4D: Funnel Plots for Fair Comparisons",
    "section": "Computing the basic derived fields",
    "text": "Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "Hands-on Exercise 4D: Funnel Plots for Fair Comparisons",
    "section": "Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#plotting-a-static-funnel-plot",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#plotting-a-static-funnel-plot",
    "title": "Hands-on Exercise 4D: Funnel Plots for Fair Comparisons",
    "section": "Plotting a static funnel plot",
    "text": "Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands-On_Ex/Hands-on_Ex04/Hands-on_Ex04D.html#interactive-funnel-plot-plotly-ggplot2",
    "title": "Hands-on Exercise 4D: Funnel Plots for Fair Comparisons",
    "section": "Interactive Funnel Plot: plotly + ggplot2",
    "text": "Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05A.html",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05A.html",
    "title": "Hands-on Exercise 5A: Creating Ternary Plot with R",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, I will be building ternary plots programmatically using R for visualising and analysing population structure of Singapore.\nThe hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#the-data",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#the-data",
    "title": "Hands-on Exercise 5A: Creating Ternary Plot with R",
    "section": "The data",
    "text": "The data\nFor the purpose of this hands-on exercise, the Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data will be used. The data set has been downloaded and included in the data sub-folder of the hands-on exercise folder. It is called respopagsex2000to2018_tidy.csv and is in csv file format."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#importing-data",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#importing-data",
    "title": "Hands-on Exercise 5A: Creating Ternary Plot with R",
    "section": "Importing Data",
    "text": "Importing Data\nTo important respopagsex2000to2018_tidy.csv into R, read_csv() function of readr package will be used.\n\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#preparing-the-data",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#preparing-the-data",
    "title": "Hands-on Exercise 5A: Creating Ternary Plot with R",
    "section": "Preparing the Data",
    "text": "Preparing the Data\nNext, use the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\n\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#plotting-a-static-ternary-diagram",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#plotting-a-static-ternary-diagram",
    "title": "Hands-on Exercise 5A: Creating Ternary Plot with R",
    "section": "Plotting a static ternary diagram",
    "text": "Plotting a static ternary diagram\nUse ggtern() function of ggtern package to create a simple ternary plot.\n\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#plotting-an-interative-ternary-diagram",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#plotting-an-interative-ternary-diagram",
    "title": "Hands-on Exercise 5A: Creating Ternary Plot with R",
    "section": "Plotting an interative ternary diagram",
    "text": "Plotting an interative ternary diagram\nThe code below create an interactive ternary plot using plot_ly() function of Plotly R.\n\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "",
    "text": "Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, I will be learning how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, I will learn how to create correlation matrix using pairs() of R Graphics. Next, I will learn how to plot corrgram using corrplot package of R. Lastly, I will learn how to create an interactive correlation matrix using plotly R."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#building-a-basic-correlation-matrix",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#building-a-basic-correlation-matrix",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "Building a basic correlation matrix",
    "text": "Building a basic correlation matrix\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\npairs(wine[,1:11])\n\n\n\n\nThe required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\npairs(wine[,2:12])"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#drawing-the-lower-corner",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#drawing-the-lower-corner",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "Drawing the lower corner",
    "text": "Drawing the lower corner\npairs function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\nSimilarly, you can display the upper half of the correlation matrix by using the code below.\n\npairs(wine[,2:12], lower.panel = NULL)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#including-correlation-coefficients",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#including-correlation-coefficients",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "Including correlation coefficients",
    "text": "Including correlation coefficients\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\nDon’t worry about the details for now-just type this code into your R session or script. Let’s have more fun way to display the correlation matrix.\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#the-basic-plot",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#the-basic-plot",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "The basic plot",
    "text": "The basic plot\nOn of the advantage of using ggcorrmat() over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\nThings to learn from the code chunk above:\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#getting-started-with-corrplot",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#getting-started-with-corrplot",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "Getting started with corrplot",
    "text": "Getting started with corrplot\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\nwine.cor &lt;- cor(wine[, 1:11])\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\ncorrplot(wine.cor)\n\n\n\n\nNotice that the default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colour or also know as saturation is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#working-with-visual-geometrics",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#working-with-visual-geometrics",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "Working with visual geometrics",
    "text": "Working with visual geometrics\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\nFeel free to change the method argument to other supported visual geometrics."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#working-with-layout",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#working-with-layout",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "Working with layout",
    "text": "Working with layout\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\nPlease feel free to experiment with other layout design argument such as tl.pos, tl.cex, tl.offset, cl.pos, cl.cex and cl.offset, just to mention a few of them."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#working-with-mixed-layout",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#working-with-mixed-layout",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "Working with mixed layout",
    "text": "Working with mixed layout\nWith corrplot package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\nNotice that argument lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument tl.pos, on the other, is used to specify the placement of the axis label. Lastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#combining-corrgram-with-the-significant-test",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#combining-corrgram-with-the-significant-test",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "Combining corrgram with the significant test",
    "text": "Combining corrgram with the significant test\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid. With corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#reorder-a-corrgram",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#reorder-a-corrgram",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "Reorder a corrgram",
    "text": "Reorder a corrgram\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#reordering-a-correlation-matrix-using-hclust",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#reordering-a-correlation-matrix-using-hclust",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "Reordering a correlation matrix using hclust",
    "text": "Reordering a correlation matrix using hclust\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#r-packages",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#r-packages",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "R packages",
    "text": "R packages\n\nggcormat() of ggstatsplot package\nggscatmat and ggpairs of GGally.\ncorrplot. A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\ncorrgram calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html",
    "title": "Hands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rowa and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this hands-on exercise, I will be using R to plot static and interactive heatmap for visualising and analysing multivariate data."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#importing-the-data-set",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#importing-the-data-set",
    "title": "Hands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Importing the data set",
    "text": "Importing the data set\nIn the code chunk below, read_csv() of readr is used to import WHData-2018.csv into R and parsed it into tibble R data frame format.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\nThe output tibbled data frame is called wh."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#preparing-the-data",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#preparing-the-data",
    "title": "Hands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Preparing the data",
    "text": "Preparing the data\nNext, we need to change the rows by country name instead of row number by using the code chunk below.\n\nrow.names(wh) &lt;- wh$Country\n\nNotice that the row number has been replaced into the country name."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#transforming-the-data-frame-into-a-matrix",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#transforming-the-data-frame-into-a-matrix",
    "title": "Hands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Transforming the data frame into a matrix",
    "text": "Transforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform wh data frame into a data matrix.\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)\n\nNotice that wh_matrix is in R matrix format."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#heatmap-of-r-stats",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#heatmap-of-r-stats",
    "title": "Hands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "heatmap() of R Stats",
    "text": "heatmap() of R Stats\nIn this sub-section, we will plot a heatmap by using heatmap() of Base Stats. The code chunk is given below.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\n\nTo plot a cluster heatmap, we just have to use the default as shown in the code chunk below.\n\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\n\nHere, red cells denotes small values, and red small ones. This heatmap is not really informative. Indeed, the Happiness Score variable have relatively higher values, what makes that the other variables with small values all look the same. Thus, we need to normalize this matrix. This is done using the scale argument. It can be applied to rows or to columns following your needs.\nThe code chunk below normalises the matrix column-wise.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\nNotice that the values are scaled now. Also note that margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#working-with-heatmaply",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#working-with-heatmaply",
    "title": "Hands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Working with heatmaply",
    "text": "Working with heatmaply\n\nheatmaply(mtcars)\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#data-transformation",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#data-transformation",
    "title": "Hands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Data transformation",
    "text": "Data transformation\nWhen analysing multivariate data set, it is very common that the variables in the data sets includes values that reflect different types of measurement. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation are commonly used before clustering.\nThree main data transformation methods are supported by heatmaply(), namely: scale, normalise and percentilse.\n\nScaling method\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nThe code chunk below is used to scale variable values columewise.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\nNormalising method\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\nPercentising method\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#clustering-algorithm",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#clustering-algorithm",
    "title": "Hands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Clustering algorithm",
    "text": "Clustering algorithm\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#manual-approach",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#manual-approach",
    "title": "Hands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Manual approach",
    "text": "Manual approach\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#statistical-approach",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#statistical-approach",
    "title": "Hands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Statistical approach",
    "text": "Statistical approach\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\nFigure above shows that k=3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#seriation",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#seriation",
    "title": "Hands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Seriation",
    "text": "Seriation\nOne of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nHere we meet our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#working-with-colour-palettes",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#working-with-colour-palettes",
    "title": "Hands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Working with colour palettes",
    "text": "Working with colour palettes\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nIn the code chunk below, the Blues colour palette of rColorBrewer is used.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#the-finishing-touch",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#the-finishing-touch",
    "title": "Hands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "The finishing touch",
    "text": "The finishing touch\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05D.html",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05D.html",
    "title": "Hands-on Exercise 5D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few(2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\nThe learning objectives of this exercise include:\n\nplotting statistic parallel coordinates plots by using ggparcoord() of GGally package,\nplotting interactive parallel coordinates plots by using parcoords package, and\nplotting interactive parallel coordinates plots by using parallelPlot package."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#plotting-a-simple-parallel-coordinates",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#plotting-a-simple-parallel-coordinates",
    "title": "Hands-on Exercise 5D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Plotting a simple parallel coordinates",
    "text": "Plotting a simple parallel coordinates\nCode chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#plotting-a-parallel-coordinates-with-boxplot",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#plotting-a-parallel-coordinates-with-boxplot",
    "title": "Hands-on Exercise 5D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Plotting a parallel coordinates with boxplot",
    "text": "Plotting a parallel coordinates with boxplot\nThe basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. In this section, you will learn how to makeover the plot by using a collection of arguments provided by ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\nThings to learn from the code chunk above.\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#parallel-coordinates-with-facet",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#parallel-coordinates-with-facet",
    "title": "Hands-on Exercise 5D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Parallel coordinates with facet",
    "text": "Parallel coordinates with facet\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\nOne of the aesthetic defect of the current design is that some of the variable names overlap on x-axis."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#rotating-x-axis-text-label",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#rotating-x-axis-text-label",
    "title": "Hands-on Exercise 5D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Rotating x-axis text label",
    "text": "Rotating x-axis text label\nTo make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#adjusting-the-rotated-x-axis-text-label",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#adjusting-the-rotated-x-axis-text-label",
    "title": "Hands-on Exercise 5D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Adjusting the rotated x-axis text label",
    "text": "Adjusting the rotated x-axis text label\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#the-basic-plot",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#the-basic-plot",
    "title": "Hands-on Exercise 5D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "The basic plot",
    "text": "The basic plot\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\nNotice that some of the axis labels are too long. You will learn how to overcome this problem in the next step."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#rotate-axis-label",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#rotate-axis-label",
    "title": "Hands-on Exercise 5D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Rotate axis label",
    "text": "Rotate axis label\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\nOne of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#changing-the-colour-scheme",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#changing-the-colour-scheme",
    "title": "Hands-on Exercise 5D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Changing the colour scheme",
    "text": "Changing the colour scheme\nWe can change the default blue colour scheme by using continousCS argument as shown in the code chunk below.\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#parallel-coordinates-plot-with-histogram",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#parallel-coordinates-plot-with-histogram",
    "title": "Hands-on Exercise 5D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Parallel coordinates plot with histogram",
    "text": "Parallel coordinates plot with histogram\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, I will be designing treemap using appropriate R packages. The hands-on exercise consists of three main sections:\n\nFirst, how to manipulate transaction data into a treemap strcuture by using selected functions provided in dplyr package.\nThen, how to plot static treemap by using treemap package.\nLastly, how to design interactive treemap by using d3treeR package."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#importing-the-data-set",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#importing-the-data-set",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "Importing the data set",
    "text": "Importing the data set\nIn the code chunk below, read_csv() of readr is used to import realis2018.csv into R and parsed it into tibble R data.frame format.\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\nThe output tibble data.frame is called realis2018."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#data-wrangling-and-manipulation",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#data-wrangling-and-manipulation",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "Data Wrangling and Manipulation",
    "text": "Data Wrangling and Manipulation\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\ngroup_by() breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\nGrouping affects the verbs as follows:\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nIn our case, group_by() will used together with summarise() to derive the summarised data.frame.\n\n\n\n\n\n\nRecommendation\n\n\n\nThose who are new to dplyr methods should consult Introduction to dplyr before moving on to the next section."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#grouped-summaries-without-the-pipe",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#grouped-summaries-without-the-pipe",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "Grouped summaries without the Pipe",
    "text": "Grouped summaries without the Pipe\nThe code chunk below shows a typical two lines code approach to perform the steps.\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\n\n\nNote\n\n\n\nAggregation functions such as sum() and meadian() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\n\n\nThe code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#grouped-summaries-with-the-pipe",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#grouped-summaries-with-the-pipe",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "Grouped summaries with the pipe",
    "text": "Grouped summaries with the pipe\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe, %&gt;%:\n\n\n\n\n\n\nRecommendation\n\n\n\nTo learn more about pipe, visit this excellent article: Pipes in R Tutorial For Beginners.\n\n\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#designing-a-static-treemap",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#designing-a-static-treemap",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "Designing a static treemap",
    "text": "Designing a static treemap\nIn this section, treemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\nFirst, we will select records belongs to resale condominium property type from realis2018_selected data frame.\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#using-the-basic-arguments",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#using-the-basic-arguments",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "Using the basic arguments",
    "text": "Using the basic arguments\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\nThings to learn from the three arguments used:\n\nindex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize\n\nThe column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\nFor treemap(), vColor is used in combination with the argument type to determines the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#working-with-vcolor-and-type-arguments",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#working-with-vcolor-and-type-arguments",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "Working with vColor and type arguments",
    "text": "Working with vColor and type arguments\nIn the code chunk below, type argument is define as value.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\nThings to learn from the code chunk above.\n\nThe rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\nThe legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#colours-in-treemap-package",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#colours-in-treemap-package",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "Colours in treemap package",
    "text": "Colours in treemap package\nThere are two arguments that determine the mapping to color palettes: mapping and palette. The only difference between “value” and “manual” is the default value for mapping. The “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color. The “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#the-value-type-treemap",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#the-value-type-treemap",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "The “value” type treemap",
    "text": "The “value” type treemap\nThe code chunk below shows a value type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\nThings to learn from the code chunk above:\n\nalthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#the-manual-type-treemap",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#the-manual-type-treemap",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "The “manual” type treemap",
    "text": "The “manual” type treemap\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\nThe code chunk below shows a manual type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\nThings to learn from the code chunk above:\n\nThe colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative\n\nTo overcome this problem, a single colour palette such as Blues should be used.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#treemap-layout",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#treemap-layout",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "Treemap Layout",
    "text": "Treemap Layout\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#working-with-algorithm-argument",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#working-with-algorithm-argument",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "Working with algorithm argument",
    "text": "Working with algorithm argument\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#using-sortid",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#using-sortid",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "Using sortID",
    "text": "Using sortID\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#designing-a-basic-treemap",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#designing-a-basic-treemap",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "Designing a basic treemap",
    "text": "Designing a basic treemap\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#defining-hierarchy",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#defining-hierarchy",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "Defining hierarchy",
    "text": "Defining hierarchy\nGroup by Planning Region\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\nGroup by Planning Area\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\nAdding boundary line\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#installing-d3treer-package",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#installing-d3treer-package",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "Installing d3treeR package",
    "text": "Installing d3treeR package\nThis slide shows you how to install a R package which is not available in cran.\n\nIf this is the first time you install a package from github, you should install devtools package by using the code below or else you can skip this step.\n\n\ninstall.packages(\"devtools\")\n\n\nNext, you will load the devtools library and install the package found in github by using the codes below.\n\n\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\")\n\n\nNow you are ready to launch d3treeR package\n\n\nlibrary(d3treeR)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#designing-an-interactive-treemap",
    "href": "Hands-On_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#designing-an-interactive-treemap",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "Designing An Interactive Treemap",
    "text": "Designing An Interactive Treemap\nThe codes below perform two processes.\n\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\n\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "In this exercise, we will be using R packages to do the following data visualisations:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#the-data",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#the-data",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "The Data",
    "text": "The Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#importing-the-data",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#importing-the-data",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Importing the data",
    "text": "Importing the data\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#examining-the-data-structure",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#examining-the-data-structure",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Examining the data structure",
    "text": "Examining the data structure\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparation",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparation",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Data Preparation",
    "text": "Data Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\n\n\n\n\n\nNote\n\n\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\n\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\n\n\nNote\n\n\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they'll be ordered when plotting\n\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-the-calendar-heatmaps",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-the-calendar-heatmaps",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Building the Calendar Heatmaps",
    "text": "Building the Calendar Heatmaps\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk\n\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there's no need to further preprocess the data."
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-multiple-calendar-heatmaps",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-multiple-calendar-heatmaps",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Building Multiple Calendar Heatmaps",
    "text": "Building Multiple Calendar Heatmaps\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Step 1: Data Import",
    "text": "Step 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-deriving-month-and-year-fields",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-deriving-month-and-year-fields",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Step 2: Deriving month and year fields",
    "text": "Step 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-3-extracting-the-target-country",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-3-extracting-the-target-country",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Step 3: Extracting the target country",
    "text": "Step 3: Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-4-computing-year-average-arrivals-by-month",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-4-computing-year-average-arrivals-by-month",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Step 4: Computing year average arrivals by month",
    "text": "Step 4: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-5-plotting-the-cycle-plot",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-5-plotting-the-cycle-plot",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Step 5: Plotting the cycle plot",
    "text": "Step 5: Plotting the cycle plot\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import-1",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import-1",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Step 1: Data Import",
    "text": "Step 1: Data Import\nImport the rice data set into R environment by using the code chunk below.\n\nrice &lt;- read_csv(\"data/rice.csv\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-plotting-the-slopegraph",
    "href": "Hands-On_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-plotting-the-slopegraph",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Step 2: Plotting the slopegraph",
    "text": "Step 2: Plotting the slopegraph\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html",
    "title": "Take Home Exercise 3: Be Weatherwise or Otherwise",
    "section": "",
    "text": "In this project, the focus is on validating temperature projections outlined in an office report, as indicated in the infographic.\n\nThe report suggests an anticipated increase in daily mean temperatures ranging from 1.4 to 4.6 degrees. Additionally, the projection highlights an expected intensification of the contrast between wet months (November to January) and dry months (February and June to September). The objective is to leverage newly acquired skills in visual interactivity and uncertainty visualization methods to scrutinize and validate the assertions made in the report."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#loading-r-packages",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#loading-r-packages",
    "title": "Take Home Exercise 3: Be Weatherwise or Otherwise",
    "section": "Loading R packages",
    "text": "Loading R packages\n\npacman::p_load(tidyverse, haven, ggiraph)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#the-data",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#the-data",
    "title": "Take Home Exercise 3: Be Weatherwise or Otherwise",
    "section": "The Data",
    "text": "The Data\nThis project will concentrate on extracting historical daily temperature or rainfall data from the Meteorological Service Singapore website. Specifically, the focus will be on the month of April for the years 1983, 1993, 2003, 2013, and 2023 in Changi area. Despite the wealth of data covering various areas in Singapore and multiple months, the project narrows its scope to derive insights from this targeted timeframe and specific set of years."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#importing-the-data",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#importing-the-data",
    "title": "Take Home Exercise 3: Be Weatherwise or Otherwise",
    "section": "Importing the Data",
    "text": "Importing the Data\nThe code chunk below uses read_sas() of haven to import PISA data into R environment.\n\ndata_2023 &lt;- read_csv(\"data/2023.csv\")\n\n\ndata_2013 &lt;- read_csv(\"data/2013.csv\")\n\n\ndata_2003 &lt;- read_csv(\"data/2003.csv\")\n\n\ndata_1993 &lt;- read_csv(\"data/1993.csv\")\n\n\ndata_1983 &lt;- read_csv(\"data/1983.csv\")"
  },
  {
    "objectID": "index.html#recent-projects",
    "href": "index.html#recent-projects",
    "title": "Rach's Visual Portfolio",
    "section": "Recent Projects:",
    "text": "Recent Projects:"
  }
]